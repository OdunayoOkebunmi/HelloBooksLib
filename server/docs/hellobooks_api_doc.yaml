openapi: 3.0.1
info:
  title: Hello Books API
  description: |
    Hello-Books is a simple application that helps manage a library and its processes like stocking, tracking and renting books. With this application users are able to find and rent books.
  contact:
    email: team-hellobooks@domain.com
  license:
    name: MIT
    url: https://github.com/emp-daisy/HelloBooksLib/blob/develop/LICENSE
  version: 1.0.0
externalDocs:
  description: Checkout the GitHub repo
  url: https://github.com/emp-daisy/HelloBooksLib
servers:
- url: /api/v1
- url: https://helobooks-staging.herokuapp.com/api/v1 # Heroku deployment (staging)
tags:
- name: Endpoint
  description: Operations available on a sample endpoint
- name: User
  description: Operations available for user endpoints
paths:
  /endpoint:
    get:
      tags:
      - Endpoint
      summary: Get all resource
      description: Add description here
      operationId: id2
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/sampleModel'
        400:
          description: Invalid status value
          content: {}
      security:
      - hellobooks_auth: []
    post:
      tags:
      - Endpoint
      summary: Create a resource
      operationId: id1
      requestBody:
        description: Parameter object decription
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sampleModel'
        required: true
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - hellobooks_auth: []
  /users/{userId}:
    get:
      tags:
      - User
      summary: Find user by ID
      description: Returns a single user
      operationId: id3
      parameters:
      - name: userId
        in: path
        description: ID of user to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid ID
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - bearer_token: []
    delete:
      tags:
      - User
      summary: Deletes a user
      operationId: id5
      parameters:
      - name: authorization
        in: header
        schema:
          type: string
      - name: userId
        in: path
        description: ID of user to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - hellobooks_auth: []
    patch:
      tags:
      - User
      summary: Updates user information in database
      operationId: id4
      parameters:
      - name: userId
        in: path
        description: ID of user that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      responses:
        405:
          description: Invalid input
          content: {}
      security:
      - hellobooks_auth: []
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
    sampleModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        anotherProperty:
          type: string
  securitySchemes:
    bearer_token:
      type: apiKey
      description: 'A JWT string is included in the response body after successful
        signup/signin. Format: "Bearer \<token\>"'
      name: x-access-token
      in: header
    hellobooks_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://some-external-link.com
          scopes: {}
