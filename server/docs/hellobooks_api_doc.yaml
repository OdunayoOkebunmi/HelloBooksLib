openapi: 3.0.1

info:
  title: Hello Books API
  description: |
    Hello-Books is a simple application that helps manage a library and its processes like stocking, tracking and renting books. With this application users are able to find and rent books.
  contact:
    email: team-hellobooks@domain.com
  license:
    name: MIT
    url: https://github.com/emp-daisy/HelloBooksLib/blob/develop/LICENSE
  version: 1.0.0

externalDocs:
  description: Checkout the GitHub repo
  url: https://github.com/emp-daisy/HelloBooksLib

servers:
- url: /api/v1
- url: https://hello-books-lib-staging.herokuapp.com/api/v1/ # Heroku deployment (staging)

securityDefinitions:
  Bearer:
    - type: apiKey
    - name: Authorization
    - in: header

tags:
- name: Users
  description: Operations available for user endpoints
- name: Authors
  description: Operations available for author endpoints
- name: Books
  description: Operations available for book endpoints
paths:
  /oauth/google:
    post:
      tags:
        - Users
      summary : Gets the user details from their google accounts, and logs him in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/errorResponse"

  /oauth/facebook:
    post:
      tags:
        - Users
      summary : Gets the user details from their facebook accounts, and logs the user in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/errorResponse"

  /auth/signup:
    post:
      tags:
        - Users
      summary: User sign up
      description: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /auth/signin:
    post:
      tags:
        - Users
      summary: User sign in using registered email
      description: Login an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        400:
          description: Bad request due to input error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /auth/users/{role}:
    post:
      tags:
        - Users
      summary: User sign up
      security:
        - bearerAuth: []
      description: Register a new user
      parameters:
        - in: path
          name: role
          schema:
            type: string
          required: true
          description: The role of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /auth/user/{id}:
    delete:
      tags:
        - Users
      summary: Delete a user from the database
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The role of the user
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /auth/getusers:
    get:
      tags:
        - Users
      summary: Delete a user from the database
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: query
          required: false
          description: To select a single user by ID
          schema:
            type : integer
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /author/favourite/{id}:
    get:
      tags:
        - Users
      summary: Allows a user to favourite an Author
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: The Authors id
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/successResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /auth/verifyemail:
    get:
      tags:
        - Users
      summary: Registered email verification
      description: Enables a user to be able verify their email after successful registeration
      parameters:
        - in: query
          name: token
          schema:
              type: string
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/successResponse"
        400:
          description: Bad request due to Invalid verification link
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /auth/passwordreset:
    post:
      tags:
        - Users
      summary: Reset password
      description: Initiate password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/successResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
  
  /books:
    post:
      tags:
        - Books
      summary: User add book
      description: Add a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                amount:
                  type: integer
                authorID:
                  type: integer
                status:
                  type: string
                categoryID:
                  type: integer
                isbn:
                  type: integer
                year:
                  type: integer
      responses:
        201:
          description: Added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
    get:
      tags:
       - Books
      summary: Query books in the library
      description: Get book listing the the library with query page and limits
      parameters:
        - in: query
          name: page
          description: Page number for book listing
          schema:
            type: string
        - in: query
          name: limit
          description: Set the number of result to get per page
          schema:
            type: string
        - in: query
          name: searchBook
          description: Keyword to search for in Books title, description and tags
          schema:
            type: string
        - in: query
          name: author
          description: Name to search for in Authors
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookList"
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /books/request:
    post:
      tags:
        - Books
      security:
        - bearerAuth: []
      summary: Request a book
      description: User should be able to request a book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                userID:
                  type: integer
                author:
                  type: integer
                year:
                  type: integer
                categoryID:
                  type: integer
      responses:
        201:
          description: Request successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /books/recieve:
    post:
      tags:
        - Books
      security:
        - bearerAuth: []
      summary: Recieves a book from a patron
      description: User should be able to return a book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isbn:
                  type: number
                damaged:
                  type: string
                patronID:
                  type: integer
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /books/{id}:
    get:
      tags:
        - Books
      summary: User fetch book
      description: Get a single book
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the book to get
      responses:
        200:
          description: Book fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

    delete:
      tags:
        - Books
      summary: User delete book
      description: Delete a specific book
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the book to delete
      responses:
        200:
          description: Book deleted successfully
          
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
  /books/borrow:
    post:
      tags:
        - Books
      security:
        - bearerAuth: []
      summary: lend a book
      description: Admin should be able to lend out books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isbn:
                  type: integer
                patronId:
                  type: integer
      responses:
        201:
          description: Request successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        405:
          description: Not allowed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /books/extend/{id}:
    patch:
      tags:
        - Books
      summary: Extend book return date
      description: Extends the date a book is supposed to be returned
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the book that was borrowed
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  example: 'MM/DD/YYYY'
      responses:
        200:
          description: Due date extended successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/dueDate"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /authors:
    post:
      tags:
        - Authors
      summary: Add an author
      description: Add a new author to the authors table
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                middleName:
                  type: string
                lastName:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        400:
          description: Bad request due to input error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
    get:
      tags:
        - Authors
      security:
        - bearerAuth: []
      summary: List all the available Authors
      description: A logged in user can get a list of the available Authors
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/successResponse"
        403:
          description: Authentication is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
  /authors/{id}:
    get:
      tags:
        - Authors
      summary: Get an author using ID
      description: Get a single author
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the author to get
      responses:
        200:
          description: Author retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

    patch:
      tags:
        - Authors
      summary: Update an author's details
      description: Modify an author's details
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the author to modify
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                middleName:
                  type: string
                lastName:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
        400:
          description: Bad request due to input error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

    delete:
      tags:
        - Authors
      summary: Delete an author using ID
      description: Delete a specific author
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the author to delete
      responses:
        200:
          description: Author deleted successfully
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /auth/assignrole:
    post:
      tags:
        - Users
      security:
        - bearerAuth: []
      summary: Assign role to users
      description: Authenticate by user role before they can perform certain actions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                role:
                  type: string  
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/successResponse"
        400:
          description: Bad request due to incorrect data sent to server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
  /auth/profile:
    get:
      tags:
        - Users
      security:
        - bearerAuth: []
      summary: Get user profile
      description: User can get other user profiles including theirs
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          required: true 
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/successResponse"
        400:
          description: Bad request due to incorrect data sent to server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
    put:
      tags:
        - Users
      security:
        - bearerAuth: []
      summary: User update profile
      description: User can update only their profile
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bio:
                  type: string
                profilePic:
                  type: string
                favoriteQuote:
                  type: string
                favoriteBooks:
                  type: array
                  items: {}
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/successResponse"
        400:
          description: Bad request due to incorrect data sent to server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        401:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  schemas:
    User:
      type: object
      properties:
        token:
          type: string
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
    Author:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
    
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        amount:
          type: integer
        year:
          type: integer
        authorID:
          type: integer
        status:
          type: string
        categoryID:
          type: integer
    
    BookList:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            format: int64
          title:
            type: string
          description:
            type: string
          amount:
            type: integer
          year:
            type: integer
          authorID:
            type: integer
          active:
            type: boolean
          createdAt:
            type: string
            format: date
          updatedAt:
            type: string
            format: date
    dueDate:
      type: object
      properties:
        dueDate:
          type: string
          format: date-time

    errorResponse:
      type: object
      properties:
        active:
          type: number
        error:
          type: string

    successResponse:
      type: object
      properties:
        active:
          type: number
        message:
          type: string
