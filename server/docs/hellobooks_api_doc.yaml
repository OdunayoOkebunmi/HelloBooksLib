openapi: 3.0.1

info:
  title: Hello Books API
  description: |
    Hello-Books is a simple application that helps manage a library and its processes like stocking, tracking and renting books. With this application users are able to find and rent books.
  contact:
    email: team-hellobooks@domain.com
  license:
    name: MIT
    url: https://github.com/emp-daisy/HelloBooksLib/blob/develop/LICENSE
  version: 1.0.0

externalDocs:
  description: Checkout the GitHub repo
  url: https://github.com/emp-daisy/HelloBooksLib

servers:
- url: /api/v1
- url: localhost:6000/api/v1/ # Heroku deployment (staging)

tags:
- name: Users
  description: Operations available for user endpoints
- name: Authors
  description: Operations available for author endpoints
- name: Books
  description: Operations available for book endpoints
paths:
  /oauth/google:
    post:
      tags:
        - Users
      summary : Gets the user details from their google accounts, and logs him in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                access_token:
                  type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/errorResponse"
  
  /auth/signup:
    post:
      tags:
        - Users
      summary: User sign up
      description: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /auth/signin:
    post:
      tags:
        - Users
      summary: User sign in using registered email
      description: Login an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        400:
          description: Bad request due to input error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /auth/verifyemail:
    get:
      tags:
        - Users
      summary: Registered email verification
      description: Enables a user to be able verify their email after successful registeration
      parameters:
        - in: query
          name: token
          schema:
              type: string
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/successResponse"
        400:
          description: Bad request due to Invalid verification link
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /auth/passwordreset:
    post:
      tags:
        - Users
      summary: Reset password
      description: Initiate password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        200:
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/successResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
  
  /book:
    post:
      tags:
        - Books
      summary: User add book
      description: Add a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                amount:
                  type: integer
                authorID:
                  type: integer
                status:
                  type: boolean
                year:
                  type: integer
      responses:
        201:
          description: Added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

  /authors:
    post:
      tags:
        - Authors
      summary: Add an author
      description: Add a new author to the authors table
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        400:
          description: Bad request due to input error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  schemas:
    User:
      type: object
      properties:
        token:
          type: string
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
    Author:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string

    errorResponse:
      type: object
      properties:
        status:
          type: number
        error:
          type: string

    successResponse:
      type: object
      properties:
        status:
          type: number
        message:
          type: string
    
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        amount:
          type: integer
        year:
          type: integer
        authorID:
          type: integer
        status:
          type: boolean

    errorResponse:
      type: object
      properties:
        status:
          type: number
        error:
          type: string

    successResponse:
      type: object
      properties:
        status:
          type: number
        message:
          type: string
